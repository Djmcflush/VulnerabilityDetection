#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# github.com/tintinweb
#

import os, sys
import logging
from pyetherchain.pyetherchain import EtherChain

logger = logging.getLogger(__name__)
OUTPUT_DIR = 'temp'

def generate_contract(contract, output_directory=OUTPUT_DIR, nr_of_transactions_to_include=5, overwrite=True):
    # only contracts with source
    logger.debug(f"got contract: {contract}")
    dst = os.path.join(output_directory, contract["address"].replace("0x","")[:2])  # index by 1st byte
    if not os.path.isdir(dst):
        os.makedirs(dst)
    fpath = os.path.join(dst, "%s_%s"%(contract["address"].replace("0x",""), str(contract['name']).replace("\\","_").replace("/","_")))
    if not overwrite and os.path.exists(fpath):
        print("skipping, already exists --> %s (%-20s) -> %s" % (contract["address"], contract["name"], fpath))
        return
    if nr_of_transactions_to_include:
        logger.debug("retrieving transactions")
    with open(fpath,"wb") as f:
        f.write(contract.describe_contract(nr_of_transactions_to_include=nr_of_transactions_to_include))

        print("dumped --> %s (%-20s) -> %s" % (contract["address"], contract["name"], fpath))
    return fpath

def batch_generate(contracts, output_directory, nr_of_transactions_to_include=5, overwrite=True):
    paths = []
    for contract in contracts:
        paths.append(generate_contract(contract, output_directory, nr_of_transactions_to_include, overwrite))
    return paths


def read_code_from_path(path):
    with open(path, 'r') as file:
        code = file.read()
    return code

def main():
    logging.basicConfig(format='[%(filename)s - %(funcName)20s() ][%(levelname)8s] %(message)s',
                        loglevel=logging.INFO)
    logger.setLevel(logging.INFO)
    s = EtherChain()
    contracts = s.contracts(start=0, length=100)["data"]
    batch_generate(contracts, sys.argv[1] if len(sys.argv)>1 else "output",
                   nr_of_transactions_to_include=5,
                   overwrite=False)

if __name__ == "__main__":
    main()